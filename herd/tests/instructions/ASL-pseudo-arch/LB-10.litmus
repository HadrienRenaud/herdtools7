ASL LB-pseudo-arch

{
  x = 0;
  y = 0;
  0: X1= x;
  0: X2= y;
}

constant one :: bits(64) = 1[63:0];

func T0(x::bits(64), y:: bits(64))
begin
  let read = read_memory{64}(x);
  let x0 = UInt(read);
  let data = one OR (read XOR read);
  write_memory{64}(y, data);
end;

func T1(x::bits(64), y:: bits(64))
begin
  let read = read_memory{64}(y);
  let x1 = UInt(read);

  var data :: bits(64);
  if x1 == one then
    data = one;
  else
    data = one;
  end;

  write_memory{64}(x, data);
end;

func main() => integer
begin
  let x = read_register(1);
  let y = read_register(2);

  T0(x, y);
  T1(x, y);

  return 0;
end;

exists (0: T0.0.x0 = 1 /\ 0: T1.0.x1 = 1)
