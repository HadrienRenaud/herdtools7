(*
 * The ARMv8 Application Level Memory Model.
 *
 * See section B2.3 of the ARMv8 ARM:
 *   https://developer.arm.com/docs/ddi0487/latest/arm-architecture-reference-manual-armv8-for-armv8-a-architecture-profile
 *
 * Author: Jade Alglave <jade.alglave@arm.com>
 *
 * Copyright (C) 2018-2020, ARM Ltd.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *     * Neither the name of ARM nor the names of its contributors may be
 *       used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)
"Armv8 External completion requirement, with mixed-size"

catdep

include "armv8-common.cat"
include "sca.cat"

let preorder-cb = IM0 | local-hw-reqs | scaob
let preorder-cb-lift = lift(MC,preorder-cb)

with cb from linearisations(MC,preorder-cb-lift)
~empty cb

let dcb = delift(cb)

let dcbl = dcb & same-loc
let rf-fwd = (W*(Exp&R)) & lrs & dcbl^-1
    & ~(intervening(W,dcbl); [Exp & R]; po-loc)  (* exclude the cases of load hazards *)
let rf-nfwd = (W*(Exp&R)) & dcbl
    & ~(dcbl; [W]; lrs) (* exclude Write Effects outdated by the local predecessor, see rf-fwd *)
    & ~intervening(W,dcbl) (* exclude Write Effects that are not the most recent in Completed-before *)
    & ~(intervening(W,dcbl); [Exp & R]; po-loc) (* exclude the cases of load hazards *)
let rf-cb = rf-fwd | rf-nfwd
let co-cb = dcbl & (W*W)

call equal(rf, rf-cb) as rfeq
call equal(co, co-cb) as cbeq

flag ~empty (if "vmsa" then _ else 0)
  as external-completion-requirement-does-not-support-variant-vmsa
flag ~empty (if "ifetch" then _ else 0)
  as external-completion-requirement-does-not-support-variant-ifetch
flag ~empty (if "memtag" then _ else 0)
  as external-completion-requirement-does-not-support-variant-memtag